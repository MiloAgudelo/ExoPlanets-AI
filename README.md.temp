# Exoplanet Detector - Frontend

Modern Next.js 15 application with space-themed UI for exoplanet detection.

## Features

- Animated starfield background
- Glassmorphism design components
- Mission selector (Kepler, TESS, K2)
- Drag & drop CSV file upload
- Real-time predictions from ML API
- Interactive statistics dashboard
- Sortable predictions table
- Fully responsive design

## Tech Stack

- Next.js 15 (React 19 RC)
- TypeScript
- Tailwind CSS 4
- Lucide React (icons)
- Axios (HTTP client)
- React Query (state management)
- Recharts (data visualization)
- Framer Motion (animations)

## Setup

### Install Dependencies

```bash
npm install --legacy-peer-deps
```

Note: Use `--legacy-peer-deps` due to React 19 RC compatibility.

### Environment Variables

Create `.env.local`:

```env
NEXT_PUBLIC_API_URL=http://localhost:8000
```

For production, update with your deployed API URL.

### Run Development Server

```bash
npm run dev
```

Visit http://localhost:3000

### Build for Production

```bash
npm run build
npm start
```

## Project Structure

```
frontend/
├── app/
│   ├── page.tsx              # Landing page
│   ├── dashboard/            # Analysis dashboard
│   ├── layout.tsx            # Root layout with StarfieldBackground
│   └── globals.css           # Tailwind + space theme styles
├── components/
│   ├── space/
│   │   ├── StarfieldBackground.tsx
│   │   └── SpaceNavbar.tsx
│   └── exoplanet/
│       ├── MissionSelector.tsx
│       ├── FileUploader.tsx
│       ├── StatisticsCards.tsx
│       └── PredictionsTable.tsx
└── lib/
    ├── api-client.ts         # API integration
    ├── theme.ts              # Space color palette
    └── utils.ts              # Helper functions
```

## Design System

### Color Palette

```typescript
{
  primary: '#0EA5E9',      // Blue
  secondary: '#8B5CF6',    // Purple
  accent: '#06B6D4',       // Cyan
  background: '#000000',   // Black
  card: 'rgba(15,15,25,0.6)' // Dark transparent
}
```

### Custom Components

- `.glass-card` - Glassmorphism effect
- `.glow-border` - Gradient hover border
- `.space-gradient` - Blue to purple gradient

## Key Components

### StarfieldBackground
Animated canvas with moving stars, creates immersive space atmosphere.

### MissionSelector
Choose between Kepler, TESS, or K2 mission models with accuracy display.

### FileUploader
Drag & drop CSV upload with file preview and validation.

### StatisticsCards
Display prediction statistics with gradient styling.

### PredictionsTable
Sortable table with confidence bars and probability breakdowns.

## API Integration

The frontend connects to the FastAPI backend through `lib/api-client.ts`:

```typescript
apiClient.predictExoplanets(mission, file)
apiClient.getMissionInfo(mission)
apiClient.getAvailableModels()
```

## Deployment

### Vercel (Recommended)

```bash
vercel
```

Set environment variables in Vercel dashboard:
- `NEXT_PUBLIC_API_URL` - Your deployed API URL

### Docker

```bash
docker build -t exoplanet-frontend .
docker run -p 3000:3000 exoplanet-frontend
```

## Performance

- Server-side rendering for fast initial load
- Code splitting for optimal bundle size
- Image optimization with Next.js Image
- Lazy loading for large datasets
- Canvas animation with requestAnimationFrame

## Browser Support

- Chrome/Edge 90+
- Firefox 88+
- Safari 14+
- Mobile browsers (iOS Safari, Chrome Android)

## Troubleshooting

### Installation Issues

If you encounter peer dependency errors:
```bash
npm install --legacy-peer-deps
```

### API Connection

Ensure backend is running on port 8000:
```bash
curl http://localhost:8000/health
```

### Build Errors

Clear Next.js cache:
```bash
rm -rf .next
npm run build
```

## Development

### Adding New Components

1. Create component in `components/` directory
2. Use space theme colors from `lib/theme.ts`
3. Apply `.glass-card` or `.glow-border` for consistent styling
4. Export from component index file

### Styling Guidelines

- Use Tailwind utility classes
- Follow space theme color palette
- Apply glassmorphism for cards
- Add hover effects with transitions
- Ensure mobile responsiveness

## License

MIT
